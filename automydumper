#!/bin/bash

export PATH="$PATH:/bin:/usr/bin"

# Defaults
backup_root_dir='/var/backups/automydumper'
backup_dir_format='+%F'
log_dir='/var/log/automydumper'
pre_dir='/usr/share/automydumper/pre.d'
post_dir='/usr/share/automydumper/post.d'
compress=1
keep=3
mysql_user='root'
mysql_password=''
mysql_host='localhost'
mysql_socket=
threads=4
mydumper_opts=''
enabled=1
mail_rcpts=''
mail_from="automydumper@${HOSTNAME}"

version="1.3.0"
echo -e "\nNote: Automydumper version ${version}"

for cfg in "${HOME}/.automydumper.cfg" /etc/automydumper.cfg; do
    # Override defaults if config file is present
    if [ -f "${cfg}" ]; then
        source "${cfg}"
        echo "Note: Using ${cfg} to override defaults."
        export AUTOMYDUMPER_CFG_FILE="${cfg}"
        break
    fi
done

backup_dir_format="${backup_dir_format/ /}"

formatted_date="$(date ${backup_dir_format})"

backup_dir="${backup_root_dir}/${formatted_date}"
export AUTOMYDUMPER_BACKUP_DIR=${backup_dir}

# Set preliminary successful exitcode
export AUTOMYDUMPER_EXIT_CODE=0

log_file="${log_dir}/${formatted_date/\//_}.log"

mydumper_opts="${mydumper_opts} --less-locking --triggers --events --routines -o ${backup_dir} -v 3 --use-savepoints --threads ${threads}"

# Compression support
[ $compress -eq 1 ] && mydumper_opts="$mydumper_opts --compress"


options=$(getopt -o h --long help -- "$@")
[ $? -eq 0 ] || {
    echo "Incorrect options provided"
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
    --help|-h)
        echo ""
        echo "Automydumper ${version}"
        echo ""
        exit
        ;;
    --)
        shift
        break
        ;;
    esac
    shift
done

function mysql_credentials()
{
    echo -n "--user=${mysql_user} "

    if [ ! -z "${mysql_password}" ]; then
        echo -n "--password=${mysql_password} "
    fi

    if [ ! -z ${mysql_socket} ]; then
        echo -n "--socket=${mysql_socket}"
    else
        echo -n "--host=${mysql_host}"
    fi
}

function check_mysql()
{
    which mysql > /dev/null
    if [ $? -ne 0 ]; then
        handle_error "MySQL client not installed."
    fi
}

function check_mydumper()
{
    which mydumper > /dev/null
    if [ $? -ne 0 ]; then
        handle_error "Mydumper not installed."
    else
        echo "Note: Using $(mydumper --version | grep -i mydumper)"
    fi
}

function check_mysql_connection()
{
    mysql $(mysql_credentials) -e 'select VERSION()' > /dev/null
    if [ $? -ne 0 ]; then
        handle_error 'Wrong MySQL credentials or hostname/socket.'
    fi
}

function check_backup_root_dir()
{
    if [ "$(basename ${backup_root_dir})" != "automydumper" ]; then
        handle_error "Backup_root_dir top directory should be 'automydumper'"
    fi
}

function create_directories()
{
    [ ${AUTOMYDUMPER_EXIT_CODE} -gt 0 ] && return

    mkdir -p $(dirname "${backup_dir}") "${log_dir}" "${pre_dir}" "${post_dir}"
}

function cleanup_backups()
{

    [ ${AUTOMYDUMPER_EXIT_CODE} -gt 0 ] && return

    if [ ${keep} -eq 0 ]; then
        echo -e "Cleanup of old backups disabled because of keep=0\n"
        return
    fi

    while [ "$(find "${backup_root_dir}" -type f -name "metadata" | wc -l)" -gt "${keep}" ]; do
        oldest=$(find "${backup_root_dir}" -type f -name "metadata" -printf '%Cs %h\n' | sort | head -n 1 | awk '{ print $2}')
        echo "Deleting ${oldest}"
        rm -rf "${oldest}"
    done
    echo ""

}

function handle_error()
{
  export AUTOMYDUMPER_EXIT_CODE=1
  export AUTOMYDUMPER_EXIT_MESSAGE="${1}"
}

function run_commands()
{
    for cmd in $(find ${1} -maxdepth 1 -type f -executable); do
        if [ "${AUTOMYDUMPER_EXIT_CODE}" -eq 0 ]; then
            echo "CMD: '${cmd}'"
            ${cmd} || handle_error "Command ${cmd} failed."
        else
            grep "automydumper:always" ${cmd} &> /dev/null
            if [ $? -eq 0 ]; then
                echo "CMD: '${cmd}'"
                ${cmd} || handle_error "Command ${cmd} failed."
            fi
        fi
    done
}

function verify_backups()
{
    return
#    if grep WARNING "${log_file}" > /dev/null; then
#        write_state "warning" "Backup completed with warnings."
#        mail_report 'Warning'
#    else
#        write_state "ok" "Backup completed successfully."
#        echo -e "Saved to ${backup_dir}.\n"
#        mail_report 'OK'
#    fi
}

function check_overwriting()
{

    [ ${AUTOMYDUMPER_EXIT_CODE} -gt 0 ] && return

    if [ -f "${backup_dir}/metadata" ]; then
        handle_error "Backup already exists."
    fi

}

function symlink_latest()
{
    rm -f "${backup_root_dir}/latest"
    ln -sfr "${backup_dir}" "${backup_root_dir}/latest"
}

function run_mydumper()
{
    [ ${AUTOMYDUMPER_EXIT_CODE} -gt 0 ] && return

    mydumper_opts="${mydumper_opts} $(mysql_credentials)"
    mydumper ${mydumper_opts}
}

function show_errors()
{
    if [ ${AUTOMYDUMPER_EXIT_CODE} -gt 0 ]; then
        echo "Critical: ${AUTOMYDUMPER_EXIT_MESSAGE}. Quitting."
    fi
}

# Stop the script when it's disabled by the user.
if [ $enabled -eq 0 ]; then
    echo "Script is disabled. Enable by removing enabled=0 from /etc/default/automydumper. Quitting."
    exit 0
fi

#trap "{ handle_error 'Unhandled exception.' }" ERR

mkdir -p "${log_dir}"

exec > >(tee -i "${log_file}")
exec 2>&1

check_backup_root_dir
check_mysql
check_mydumper
check_mysql_connection
create_directories

# Run pre_command if it is defined
run_commands ${pre_dir}

check_overwriting

run_mydumper

symlink_latest

# Run post_command if it is defined
run_commands ${post_dir}

cleanup_backups

verify_backups

show_errors

exit ${AUTOMYDUMPER_EXIT_CODE}
